---
import "../styles/global.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
}

// --- Default values ---
const defaultTitle = "127.0.0.1";
const defaultDescription =
  "A retro-style, minimalist landing page for dev links â€” built with Astro, with dark/light modes.";
const defaultOgImage = "https://i.imgur.com/J5anI4Y.png";

// --- Get values from props or use defaults ---
const {
  title = defaultTitle,
  description = defaultDescription,
  ogImage = defaultOgImage,
} = Astro.props;

// --- Get the canonical URL for the current page ---
const canonicalURL = Astro.url.href;

// --- Determine the final absolute OG image URL ---
let absoluteOgImage = ogImage.startsWith("http") ? ogImage : defaultOgImage;
// A more robust check if you might pass relative paths via props:
if (ogImage && ogImage.startsWith("/") && Astro.site) {
  absoluteOgImage = new URL(ogImage, Astro.site).href;
} else if (ogImage && ogImage.startsWith("http")) {
  absoluteOgImage = ogImage; // Use the absolute URL passed in props
} else {
  absoluteOgImage = defaultOgImage; // Fallback to default
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>

    {/* --- SEO and Social Meta Tags --- */}
    <meta name="description" content={description} />

    {/* --- Open Graph (Facebook, LinkedIn, etc.) --- */}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={absoluteOgImage} />
    <meta property="og:type" content="website" />

    {/* --- Fonts --- */}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=VT323&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;700&display=swap"
      rel="stylesheet"
    />

    {/* --- Theme Script --- */}
    <script is:inline>
      const STORAGE_KEY = "theme";
      const applyTheme = (theme) => {
        document.documentElement.setAttribute("data-theme", theme);
        // No localStorage setting here, just applying
      };
      const getInitialTheme = () => {
        try {
          // Wrap localStorage access in try...catch for browser privacy settings
          const savedTheme = localStorage.getItem(STORAGE_KEY);
          if (savedTheme) return savedTheme;
        } catch (e) {}
        // Check OS preference only if no saved theme
        if (
          window.matchMedia &&
          window.matchMedia("(prefers-color-scheme: dark)").matches
        ) {
          return "dark";
        }
        return "light"; // Default
      };
      applyTheme(getInitialTheme());
    </script>
  </head>
  <body>
    <div class="page-container">
      <Header />
      <main class="main-content">
        <slot />
        {/* Page content will be injected here */}
      </main>
      <Footer />
    </div>
    {/* Import the main toggle script (runs after DOM is ready) */}
    <script src="../scripts/theme-toggle.js"></script>
  </body>
</html>
